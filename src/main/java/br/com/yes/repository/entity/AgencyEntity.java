package br.com.yes.repository.entity;

import br.com.yes.domain.Agency;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import lombok.*;

import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@DynamoDBTable(tableName = "Agencies")
public class AgencyEntity {

    @DynamoDBHashKey(attributeName = "Id")
    @DynamoDBAutoGeneratedKey
    private String id;

    @DynamoDBAttribute(attributeName = "Name")
    private String name;

    @DynamoDBAttribute(attributeName = "Cnpj")
    private String cnpj;

    @DynamoDBAttribute(attributeName = "Representative")
    private RepresentativeEntity representative;

    @DynamoDBAttribute(attributeName = "Partners")
    private List<String> partners;

    public static AgencyEntity fromDomain(final Agency agency) {
        final RepresentativeEntity representative = RepresentativeEntity.fromDomain(agency.getRepresentative());
        final List<String> partners = agency.getPartners()
                .stream()
                .map(Agency::getId)
                .map(UUID::toString)
                .collect(Collectors.toList());

        return AgencyEntity.builder()
                .id(agency.getId().toString())
                .name(agency.getName())
                .cnpj(agency.getCnpj())
                .representative(representative)
                .partners(partners)
                .build();
    }

    public Agency toDomain() {
        final List<Agency> partners = this.partners.stream()
                .map(partner -> new Agency(UUID.fromString(partner)))
                .collect(Collectors.toList());

        return Agency.builder()
                .id(UUID.fromString(this.id))
                .name(this.name)
                .cnpj(this.cnpj)
                .representative(this.representative.toDomain())
                .partners(partners)
                .build();
    }
}
