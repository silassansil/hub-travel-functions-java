package br.com.yes.repository.entity;

import br.com.yes.domain.Excursion;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import lombok.*;

import java.time.LocalDate;
import java.util.UUID;

@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@DynamoDBTable(tableName = "Excursions")
public class ExcursionEntity {

    @DynamoDBHashKey(attributeName = "Id")
    @DynamoDBAutoGeneratedKey
    private String id;

    @DynamoDBAttribute(attributeName = "Destination")
    private String destination;

    @DynamoDBAttribute(attributeName = "Departure")
    private String departure;

    @DynamoDBAttribute(attributeName = "Armchairs")
    private Short armchairs;

    @DynamoDBAttribute(attributeName = "Description")
    private String description;

    @DynamoDBAttribute(attributeName = "OwnerId")
    private String ownerId;

    public static ExcursionEntity fromDomain(final Excursion excursion) {
        return ExcursionEntity.builder()
                .destination(excursion.getDestination())
                .departure(excursion.getDeparture().toString())
                .armchairs(excursion.getArmchairs())
                .description(excursion.getDescription())
                .ownerId(excursion.getOwnerId().toString())
                .build();
    }

    public Excursion toDomain() {
        return Excursion.builder()
                .id(UUID.fromString(this.id))
                .destination(this.destination)
                .departure(LocalDate.parse(this.departure))
                .armchairs(this.armchairs)
                .description(this.description)
                .ownerId(UUID.fromString(this.ownerId))
                .build();
    }
}
